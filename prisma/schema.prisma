generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum NewsType {
  GENERAL // Informations générales
  EVENEMENT // Événement
  ANNONCE // Annonce
  ACTUALITE // Actualité
  PROGRAMMATION // Programmation
}

model News {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  type        String   @default("GENERAL")
  publishedAt DateTime @default(now())
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id], name: "UserNews")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  password     String
  name         String?
  role         String         @default("user")
  createdAt    DateTime       @default(now())
  books        Book[]
  News         News[]         @relation(name: "UserNews")
  CoupsDeCoeur CoupsDeCoeur[]
}

model Book {
  id                     Int                 @id @default(autoincrement())
  title                  String
  author                 String
  publishedDate          DateTime?
  isbn                   String?             @unique
  description            String?
  readingDurationMinutes Int?
  publisher              String?
  available              Boolean             @default(true)
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  addedById              Int
  addedBy                User                @relation(fields: [addedById], references: [id])
  genres                 BookGenre[]
  CoupsDeCoeurBooks      CoupsDeCoeurBooks[]
}

model Genre {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  books       BookGenre[]
}

model CoupsDeCoeur {
  id          Int                 @id @default(autoincrement())
  title       String
  description String?
  audioPath   String?
  active      Boolean             @default(true)
  addedById   Int
  addedBy     User                @relation(fields: [addedById], references: [id])
  books       CoupsDeCoeurBooks[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model CoupsDeCoeurBooks {
  coupsDeCoeur   CoupsDeCoeur @relation(fields: [coupsDeCoeurId], references: [id])
  coupsDeCoeurId Int
  book           Book         @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId         Int

  @@id([coupsDeCoeurId, bookId])
}

model BookGenre {
  book    Book  @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId  Int
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId Int

  @@id([bookId, genreId])
}
