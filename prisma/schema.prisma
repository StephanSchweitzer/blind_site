generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model News {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  publishedAt DateTime @default(now())
  authorId    Int
  type        String   @default("GENERAL")
  author      User     @relation("UserNews", fields: [authorId], references: [id])
}

model User {
  id                  Int            @id @default(autoincrement())
  email               String         @unique
  password            String
  name                String?
  role                String         @default("user")
  createdAt           DateTime       @default(now())
  passwordNeedsChange Boolean        @default(true)
  books               Book[]
  CoupsDeCoeur        CoupsDeCoeur[]
  News                News[]         @relation("UserNews")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Book {
  id                     Int                 @id @default(autoincrement())
  title                  String
  author                 String
  publishedDate          DateTime?
  isbn                   String?             @unique
  description            String?
  available              Boolean             @default(true)
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  addedById              Int
  readingDurationMinutes Int?
  publisher              String?
  pageCount              Int?
  subtitle               String?
  addedBy                User                @relation(fields: [addedById], references: [id])
  genres                 BookGenre[]
  CoupsDeCoeurBooks      CoupsDeCoeurBooks[]

  @@index([createdAt(sort: Desc)])
  @@index([title])
  @@index([author])
  @@index([isbn])
  @@index([available])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Genre {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  books       BookGenre[]

  @@index([name])
}

model CoupsDeCoeur {
  id          Int                 @id @default(autoincrement())
  title       String
  description String?
  audioPath   String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  active      Boolean             @default(true)
  addedById   Int
  addedBy     User                @relation(fields: [addedById], references: [id])
  books       CoupsDeCoeurBooks[]
}

model CoupsDeCoeurBooks {
  coupsDeCoeurId Int
  bookId         Int
  book           Book         @relation(fields: [bookId], references: [id], onDelete: Cascade)
  coupsDeCoeur   CoupsDeCoeur @relation(fields: [coupsDeCoeurId], references: [id])

  @@id([coupsDeCoeurId, bookId])
}

model BookGenre {
  bookId  Int
  genreId Int
  book    Book  @relation(fields: [bookId], references: [id], onDelete: Cascade)
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@id([bookId, genreId])
  @@index([bookId])
  @@index([genreId])
}

enum NewsType {
  GENERAL
  EVENEMENT
  ANNONCE
  ACTUALITE
  PROGRAMMATION
}
